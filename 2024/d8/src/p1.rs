#![allow(dead_code)]

#[cfg(test)]
mod tests {
    use crate::{solve, solve_p2};
    // use miette::miette;

    #[test]
    fn it_works() -> miette::Result<()> {
        let s = solve(String::from(
            "............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............",
        ));

        assert_eq!("14", s?);
        Ok(())
    }

    #[test]
    fn it_works2() -> miette::Result<()> {
        let s = solve(String::from(
            "..........
..........
..........
....a.....
..........
.....a....
..........
..........
..........
..........",
        ));

        assert_eq!("2", s?);
        Ok(())
    }

    #[test]
    fn it_works3() -> miette::Result<()> {
        let s = solve(String::from(
            "..........
..........
..........
....a.....
........a.
.....a....
..........
..........
..........
..........",
        ));

        assert_eq!("4", s?);
        Ok(())
    }

    #[test]
    fn it_works_p2_1() -> miette::Result<()> {
        let s = solve_p2(String::from(
            "T.........
...T......
.T........
..........
..........
..........
..........
..........
..........
..........",
        ));

        assert_eq!("9", s?);
        Ok(())
    }

    #[test]
    fn it_works_p2_2() -> miette::Result<()> {
        let s = solve_p2(String::from(
            "............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............",
        ));

        assert_eq!("34", s?);
        Ok(())
    }
}
